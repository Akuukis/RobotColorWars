pastebin run DvZXGEGh 2
i=nav:new(); print(i:go({46,48,0}))
quit
i=nav:new(); print(i:go({6,8,0}))
print(i:go({0,0,0}))
print(i:getMap({0,2,0}).substance)
for k,v in pairs(i:getPos()) do print(k,v) end
aa = thread.spawn(function () while true do for k,v in pairs(i:getPos()) do print(k,v) end; thread.yield(1) end end,i)
a = thread.spawn(function () while true do i:drawMap(); thread.yield() end end,i)
b = thread.spawn(i.go,i,{6,8,0})
c = thread.spawn(i.go,i,{9,0,0})
thread.kill(a)

pastebin get 3AKpWFvr /usr/lib/nav.lua -f
lua
nav = require("nav"); m = nav:new(); m:go({1400,0,0})
nav = require("nav"); m = nav:new(); m:go({6,8,0})
nav = require("nav"); m = nav:new(); m:go({4,0,0})
m:drawMap()
nav = require("nav"); m = nav:new(); for j=1,50 do for i=1,50 do m:putMap({1,i-25,j-25},{substance="solid"}) end end; m:go({2,0,0})



print(i:comparePos({x=1,y=0,z=0},{{0,0,0},{1,0,0}}))

for k,v in pairs(i.map) do print(k,v) end
for j=0,8 do print(i:getMap({6,j,1}).substance) end


for i=1,4 do Jobs.MineH(8);	Nav.TurnLeft(); Nav.Step("Normal"); Nav.TurnLeft() end
for i=1,list.getInventorySize() do list.pushItem("west",i) end
for i=1,16 do list.pullItem("west",i) end
Jobs.MineH(48,12,true)

constDirNames = {"north","east","south","west","up","down"}; Slot = 2; Chest = peripheral.wrap("front"); for i = 1,6 do print(Chest.pullItem(constDirNames[i],Slot,64,1)) end

Chest = peripheral.wrap("front"); for i = 1,Chest.getInventorySize() do if (Chest.getStackInSlot(i) or 0) == 0 then ChestSlot = i end end; print(ChestSlot)

print(Chest.pushItem("east",1,64,1))
print("kuku")
Nav.Go({1,1,2},{1,-1,1},{1,2,1})
Nav.GoNextTo({3,0,2},"Careful")
sleep(2);sleep(2)

sleep(3); print("kuku")
for n,v in pairs(Init.clsTurtle) do print(n,": ", v) end



-- thread loader script
shell = require("shell")
shell.execute("del thread")
shell.execute("pastebin get dS1NHyRt thread")
thread = dofile("thread")
thread.manager()

-- thread demonstration functions, copy/paste lines in console
-- expect very bad user interface, broken lines, etc.
print("kuku!") -- expect it working
print("kuku!""") -- expect error at loading
print(nill[index]) -- expect error at executing
a, err = thread.spawn(function () print("kuku!") end) -- expect it working
b, err = thread.spawn(function () print("kuku!""") end) -- expect error
c, err = thread.spawn(function () print(nill[index]) end) -- expect error
d, err = thread.spawn(function () for i=1,10 do print(i) end end) -- expect non-yielding fast 1-10 that discards input
e, err = thread.spawn(function () for i=1,10 do print(i); os.sleep(0.5) end end) -- expect non-yielding slow 1-10 that discards input
f, err = thread.spawn(function () event = require("event"); for i=1,10 do print(i); event.pull(0.5) end end) -- expect non-yielding, variable speed 1-10 that discards input
g, err = thread.spawn(function () for i=1,10 do print(i); thread.yield(0.5) end end) -- expect yielding slow 1-10
h, err = thread.spawn(function () for i=1,10 do print(string.char(96+i-1)); coroutine.yield(0.5) end end) -- expect yielding slow a-i
i, err = thread.spawn(function () for i=1,10 do print(i); thread.yield(0.5) end end); _,e = thread.spawn(function () for i=1,10 do print(string.char(96+i-1)); coroutine.yield(0.5) end end) -- expect slow 1-10 and a-i at the same time
j, err = thread.spawn(function () computer = require("computer"); while true do computer.beep(); thread.yield(3) end end) -- expect it to beep every 3 secs
thread.pause(j) -- expect not beeping
thread.unpause(j) -- expect beeping, notice that delay is not reset while paused
thread.pause(j,2) -- expect not beeping
thread.setAlarm(j,nil) -- expect to see nothing but delay has been reset
thread.unpause(j) -- expect not beeping again
thread.unpause(j, math.huge) -- expect beeping, notice that delay has been reset
thread.setAlarm(j,7+os.clock()*60) -- expect to notice that delay was increased, once.
for k,v in pairs(thread.getThread(j)) do print(k,v) end -- expect to see properties about beeping thread
thread.setName(j,"Beeper") -- expect to see nothing but name has been changed
for k,v in pairs(thread.getThread(j)) do print(k,v) end -- expect to see properties about beeping thread, notice the name
thread.kill(j) -- expect not beeping
print(thread.getThread(j)) -- expect error "No running thread found, try to dig"
print(thread.dig(j)) -- expect to see some values: true (function succeeded), and a table
print(table.unpack(table.pack(thread.dig(j))[2])) -- expect to see some values: false (thread errored or was killed), "killed" (error message), uid (of thread that killed it), number (time in seconds when killed)
k, err = thread.spawn(function () return 23,45,"Completed!" end) -- expect to see nothing
print(thread.dig(k)) -- expect to see some values: true (function succeeded), and a table
print(table.unpack(table.pack(thread.dig(k))[2])) -- expect to see some values: true (function succeeded), true (thread returned), then list of return values.
l, err = thread.spawn(function () computer = require("computer"); while true do if thread.yield() == "beep!" then computer.beep() end end end) -- expect to see nothing
for i=1,5 do thread.whisper(l,"beep!") end -- expect to hear a beep 5 times
thread.kill(l) -- expect not beeping
m, err = thread.spawn(function () computer = require("computer"); while true do if thread.yield() == "beep!" then computer.beep(); local uid = thread.getThread().uid; thread.setAnswer( uid, (thread.getAnswer(uid) or 0) + 1) end end end) -- expect to see nothing
for i=1,5 do thread.whisper(m,"beep!") end -- expect to hear a beep 5 times
print("Beeps in my thread lifetime:", thread.getAnswer(m)) -- expect to see number of beeps
for k,v in pairs(thread.getThreads()) do print (k, v.name, v.uid) end -- expect to see a list of threads
for k,v in pairs(thread.getThreads()) do if v.name ~= "Default console" then thread.kill(v.uid) end end -- expect to see nothing
for k,v in pairs(thread.getThreads()) do print (k, v.name, v.uid) end -- expect to see only one thread left
thread.exit() -- expect to exit back to OpenOS

for k,v in pairs(_ENV) do print(k,v) end

print(string.format("%dm",os.clock()-math.floor(os.clock()/60)))
for k,v in pairs(i.map.M) do print(k,v) end
