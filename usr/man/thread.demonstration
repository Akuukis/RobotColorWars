NAME
  Demonstration
  
DESCRIPTION
  Follow the instructions to introduce yourself to the Parallel Thread Library.
  
INSTRUCTIONS
  1. Make a computer/robot and install OpenOS on it
  2. make & run a file with following code:
    shell = require("shell")
    shell.execute("del thread.lua")
    shell.execute("pastebin get dS1NHyRt thread.lua") -- that's Akuukis pastebin, you may want to change to your own.
    thread = dofile("thread.lua")
    thread.manager()
  3. Test the commands below. Enjoy!
  
-- Demonstration functions, copy/paste lines in console
-- expect very bad user interface, broken lines, etc.
print("kuku!") -- expect it working
print("kuku!""") -- expect error at loading, notice how console prints loading errors
print(nill[index]) -- expect error at executing, notice how console prints running errors
a, err = thread.spawn(function () print("kuku!") end) -- expect it working
b, err = thread.spawn(function () print("kuku!""") end) -- expect error, notice how manager prints loading errors
c, err = thread.spawn(function () print(nill[index]) end) -- expect error, notice how manager prints running errors
d, err = thread.spawn(function () for i=1,10 do print(i) end end) -- expect non-yielding fast 1-10 that discards input
e, err = thread.spawn(function () for i=1,10 do print(i); os.sleep(0.5) end end) -- expect non-yielding slow 1-10 that discards input
f, err = thread.spawn(function () event = require("event"); for i=1,10 do print(i); event.pull(0.5) end end) -- expect non-yielding, variable speed 1-10 that discards input
g, err = thread.spawn(function () for i=1,10 do print(i); thread.yield(0.5) end end) -- expect yielding slow 1-10
h, err = thread.spawn(function () for i=1,10 do print(string.char(96+i-1)); coroutine.yield(0.5) end end) -- expect yielding slow a-i
i, err = thread.spawn(function () for i=1,10 do print(i); thread.yield(0.5) end end); _,e = thread.spawn(function () for i=1,10 do print(string.char(96+i-1)); coroutine.yield(0.5) end end) -- expect slow 1-10 and a-i at the same time
j, err = thread.spawn(function () computer = require("computer"); while true do computer.beep(); thread.yield(3) end end) -- expect it to beep every 3 secs
thread.pause(j) -- expect not beeping
thread.unpause(j) -- expect beeping, notice that delay is not reset while paused
thread.pause(j,2) -- expect not beeping
thread.setAlarm(j,nil) -- expect to see nothing but delay has been reset
thread.unpause(j) -- expect not beeping again
thread.unpause(j, math.huge) -- expect beeping, notice that delay has been reset
thread.setAlarm(j,7+os.clock()*60) -- expect to notice that delay was increased, once.
for k,v in pairs(thread.getThread(j)) do print(k,v) end -- expect to see properties about beeping thread
thread.setName(j,"Beeper") -- expect to see nothing but name has been changed
for k,v in pairs(thread.getThread(j)) do print(k,v) end -- expect to see properties about beeping thread, notice the name
thread.kill(j) -- expect not beeping
print(thread.getThread(j)) -- expect error "No running thread found, try to dig"
print(thread.dig(j)) -- expect to see some values: true (function succeeded), and a table
print(table.unpack(table.pack(thread.dig(j))[2])) -- expect to see some values: false (thread errored or was killed), "killed" (error message), uid (of thread that killed it), number (time in seconds when killed)
k, err = thread.spawn(function () return 23,45,"Completed!" end) -- expect to see nothing
print(thread.dig(k)) -- expect to see some values: true (function succeeded), and a table
print(table.unpack(table.pack(thread.dig(k))[2])) -- expect to see some values: true (function succeeded), true (thread returned), then list of return values.
l, err = thread.spawn(function () computer = require("computer"); while true do if thread.yield() == "beep!" then computer.beep() end end end) -- expect to see nothing
for i=1,5 do thread.whisper(l,"beep!") end -- expect to hear a beep 5 times
thread.kill(l) -- expect not beeping
m, err = thread.spawn(function () computer = require("computer"); while true do if thread.yield() == "beep!" then computer.beep(); local uid = thread.getThread().uid; thread.setAnswer( uid, (thread.getAnswer(uid) or 0) + 1) end end end) -- expect to see nothing
for i=1,5 do thread.whisper(m,"beep!") end -- expect to hear a beep 5 times
print("Beeps in my thread lifetime:", thread.getAnswer(m)) -- expect to see number of beeps
for k,v in pairs(thread.getThreads()) do print (k, v.name, v.uid) end -- expect to see a list of threads
for k,v in pairs(thread.getThreads()) do if v.name ~= "Default console" then thread.kill(v.uid) end end -- expect to see nothing
for k,v in pairs(thread.getThreads()) do print (k, v.name, v.uid) end -- expect to see only one thread left
thread.exit() -- expect to exit back to OpenOS