path = select(1,...)
if path == nil then path = "" end

--                 "Main" -- (in WIP - mainly debugging) Provides ongoing process, handles errors and updates APIs on the fly
os.loadAPI(path .. "Init") -- Provides set-up for turtle that has just been turned on
os.loadAPI(path .. "Comm") -- Provides sending & listening to info between turtles
os.loadAPI(path .. "Utils") -- Provides Self-monitoring, reacting & a collection of random tasks
os.loadAPI(path .. "Resm") -- Provides resource management. Counts and prices resources in Suppy and Demand
os.loadAPI(path .. "Logic") -- Provides decision making, weights alternatives and picks a Job to do
os.loadAPI(path .. "Nav") -- Provides pathfinding, moving & mapping
os.loadAPI(path .. "Jobs") -- Provides a collection of instructions
os.loadAPI(path .. "Logger") -- Filters info and parses it to Stats, Rui, Gui, Hud (not vital but very neccessary)
os.loadAPI(path .. "Stats") -- Gathers and aggregates data for analysis, improvement and fun
os.loadAPI(path .. "Rui") -- Remote (or Rednet) user interface (Player interface, not vital)
os.loadAPI(path .. "Gui") -- Graphical user interface (Player interface, not vital)
os.loadAPI(path .. "Hud") -- Heads-Up display (Player interface, not vital)

function loop()
	Logger.PrintMap()
	Utils.Refuel()
	Utils.printf("\n>")
	str = loadstring(io.read())
	
	--[[
	Logger.Check("\nNeighbors:")	
	for f=0,5 do Logger.Debug("(F%s,%s,%s,%s)",f, Nav.GetPos(pos,f,"x"), Nav.GetPos(pos,f,"z"), Nav.GetPos(pos,f,"y")) end
	Logger.Check("\n") --]]
	
	if str() then
		Utils.printfs("Failed or exceeded tries!\n")
	else
		Utils.printfs("Succeeded!\n")
	end
	
	pos = Nav.GetPos()
	Utils.printf(" Coords: (%s,%s,%s), F:%s\n",Nav.GetPos("x"),Nav.GetPos("z"),Nav.GetPos("y"),Nav.GetPos("f"))
end

init()
while true do
	loop()
end